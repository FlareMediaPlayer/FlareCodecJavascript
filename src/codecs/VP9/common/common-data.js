'use strict';

var ENUMS = require("./vp9-enums"); //Using same format as libvpx

module.exports = Object.freeze({

    b_width_log2_lookup: [0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4],

    b_height_log2_lookup: [0, 1, 0, 1, 2, 1, 2, 3, 2, 3, 4, 3, 4],

    num_4x4_blocks_wide_lookup: [1, 1, 2, 2, 2, 4, 4, 4, 8, 8, 8, 16, 16],

    num_4x4_blocks_high_lookup: [1, 2, 1, 2, 4, 2, 4, 8, 4, 8, 16, 8, 16],

    mi_width_log2_lookup: [0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3],

    num_8x8_blocks_wide_lookup: [1, 1, 1, 1, 1, 2, 2, 2, 4, 4, 4, 8, 8],

    num_8x8_blocks_high_lookup: [1, 1, 1, 1, 2, 1, 2, 4, 2, 4, 8, 4, 8],

    size_group_lookup: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3],

    num_pels_log2_lookup: [4, 5, 5, 6, 7, 7, 8, 9, 9, 10, 11, 11, 12],

    /*ENUMS.PARTITION_TYPE*/
    partition_lookup: [
        [// 4X4
            // 4X4, 4X8,8X4,8X8,8X16,16X8,16X16,16X32,32X16,32X32,32X64,64X32,64X64
            ENUMS.PARTITION_NONE, ENUMS.PARTITION_INVALID, ENUMS.PARTITION_INVALID,
            ENUMS.PARTITION_INVALID, ENUMS.PARTITION_INVALID, ENUMS.PARTITION_INVALID,
            ENUMS.PARTITION_INVALID, ENUMS.PARTITION_INVALID, ENUMS.PARTITION_INVALID,
            ENUMS.PARTITION_INVALID, ENUMS.PARTITION_INVALID, ENUMS.PARTITION_INVALID,
            ENUMS.PARTITION_INVALID
        ], [// 8X8
            // 4X4, 4X8,8X4,8X8,8X16,16X8,16X16,16X32,32X16,32X32,32X64,64X32,64X64
            ENUMS.PARTITION_SPLIT, ENUMS.PARTITION_VERT, ENUMS.PARTITION_HORZ, ENUMS.PARTITION_NONE,
            ENUMS.PARTITION_INVALID, ENUMS.PARTITION_INVALID, ENUMS.PARTITION_INVALID,
            ENUMS.PARTITION_INVALID, ENUMS.PARTITION_INVALID, ENUMS.PARTITION_INVALID,
            ENUMS.PARTITION_INVALID, ENUMS.PARTITION_INVALID, ENUMS.PARTITION_INVALID
        ], [// 16X16
            // 4X4, 4X8,8X4,8X8,8X16,16X8,16X16,16X32,32X16,32X32,32X64,64X32,64X64
            ENUMS.PARTITION_SPLIT, ENUMS.PARTITION_SPLIT, ENUMS.PARTITION_SPLIT, ENUMS.PARTITION_SPLIT,
            ENUMS.PARTITION_VERT, ENUMS.PARTITION_HORZ, ENUMS.PARTITION_NONE, ENUMS.PARTITION_INVALID,
            ENUMS.PARTITION_INVALID, ENUMS.PARTITION_INVALID, ENUMS.PARTITION_INVALID,
            ENUMS.PARTITION_INVALID, ENUMS.PARTITION_INVALID
        ], [// 32X32
            // 4X4, 4X8,8X4,8X8,8X16,16X8,16X16,16X32,32X16,32X32,32X64,64X32,64X64
            ENUMS.PARTITION_SPLIT, ENUMS.PARTITION_SPLIT, ENUMS.PARTITION_SPLIT, ENUMS.PARTITION_SPLIT,
            ENUMS.PARTITION_SPLIT, ENUMS.PARTITION_SPLIT, ENUMS.PARTITION_SPLIT, ENUMS.PARTITION_VERT,
            ENUMS.PARTITION_HORZ, ENUMS.PARTITION_NONE, ENUMS.PARTITION_INVALID,
            ENUMS.PARTITION_INVALID, ENUMS.PARTITION_INVALID
        ], [// 64X64
            // 4X4, 4X8,8X4,8X8,8X16,16X8,16X16,16X32,32X16,32X32,32X64,64X32,64X64
            ENUMS.PARTITION_SPLIT, ENUMS.PARTITION_SPLIT, ENUMS.PARTITION_SPLIT, ENUMS.PARTITION_SPLIT,
            ENUMS.PARTITION_SPLIT, ENUMS.PARTITION_SPLIT, ENUMS.PARTITION_SPLIT, ENUMS.PARTITION_SPLIT,
            ENUMS.PARTITION_SPLIT, ENUMS.PARTITION_SPLIT, ENUMS.PARTITION_VERT, ENUMS.PARTITION_HORZ,
            ENUMS.PARTITION_NONE
        ]
    ],

    subsize_lookup: [
        [// ENUMS.PARTITION_NONE
            ENUMS.BLOCK_4X4, ENUMS.BLOCK_4X8, ENUMS.BLOCK_8X4,
            ENUMS.BLOCK_8X8, ENUMS.BLOCK_8X16, ENUMS.BLOCK_16X8,
            ENUMS.BLOCK_16X16, ENUMS.BLOCK_16X32, ENUMS.BLOCK_32X16,
            ENUMS.BLOCK_32X32, ENUMS.BLOCK_32X64, ENUMS.BLOCK_64X32,
            ENUMS.BLOCK_64X64,
        ], [// ENUMS.PARTITION_HORZ
            ENUMS.BLOCK_INVALID, ENUMS.BLOCK_INVALID, ENUMS.BLOCK_INVALID,
            ENUMS.BLOCK_8X4, ENUMS.BLOCK_INVALID, ENUMS.BLOCK_INVALID,
            ENUMS.BLOCK_16X8, ENUMS.BLOCK_INVALID, ENUMS.BLOCK_INVALID,
            ENUMS.BLOCK_32X16, ENUMS.BLOCK_INVALID, ENUMS.BLOCK_INVALID,
            ENUMS.BLOCK_64X32,
        ], [// ENUMS.PARTITION_VERT
            ENUMS.BLOCK_INVALID, ENUMS.BLOCK_INVALID, ENUMS.BLOCK_INVALID,
            ENUMS.BLOCK_4X8, ENUMS.BLOCK_INVALID, ENUMS.BLOCK_INVALID,
            ENUMS.BLOCK_8X16, ENUMS.BLOCK_INVALID, ENUMS.BLOCK_INVALID,
            ENUMS.BLOCK_16X32, ENUMS.BLOCK_INVALID, ENUMS.BLOCK_INVALID,
            ENUMS.BLOCK_32X64,
        ], [// ENUMS.PARTITION_SPLIT
            ENUMS.BLOCK_INVALID, ENUMS.BLOCK_INVALID, ENUMS.BLOCK_INVALID,
            ENUMS.BLOCK_4X4, ENUMS.BLOCK_INVALID, ENUMS.BLOCK_INVALID,
            ENUMS.BLOCK_8X8, ENUMS.BLOCK_INVALID, ENUMS.BLOCK_INVALID,
            ENUMS.BLOCK_16X16, ENUMS.BLOCK_INVALID, ENUMS.BLOCK_INVALID,
            ENUMS.BLOCK_32X32,
        ]
    ],

    max_txsize_lookup: [
        ENUMS.TX_4X4, ENUMS.TX_4X4, ENUMS.TX_4X4,
        ENUMS.TX_8X8, ENUMS.TX_8X8, ENUMS.TX_8X8,
        ENUMS.TX_16X16, ENUMS.TX_16X16, ENUMS.TX_16X16,
        ENUMS.TX_32X32, ENUMS.TX_32X32, ENUMS.TX_32X32, ENUMS.TX_32X32
    ],

    txsize_to_bsize: [
        ENUMS.BLOCK_4X4, // ENUMS.TX_4X4
        ENUMS.BLOCK_8X8, // ENUMS.TX_8X8
        ENUMS.BLOCK_16X16, // ENUMS.TX_16X16
        ENUMS.BLOCK_32X32, // ENUMS.TX_32X32
    ],

    tx_mode_to_biggest_tx_size: [
        ENUMS.TX_4X4, // ONLY_4X4
        ENUMS.TX_8X8, // ALLOW_8X8
        ENUMS.TX_16X16, // ALLOW_16X16
        ENUMS.TX_32X32, // ALLOW_32X32
        ENUMS.TX_32X32, // ENUMS.TX_MODE_SELECT
    ],

    ss_size_lookup: [
//  ss_x == 0    ss_x == 0        ss_x == 1      ss_x == 1
//  ss_y == 0    ss_y == 1        ss_y == 0      ss_y == 1
        [[ENUMS.BLOCK_4X4, ENUMS.BLOCK_INVALID], [ENUMS.BLOCK_INVALID, ENUMS.BLOCK_INVALID]],
        [[ENUMS.BLOCK_4X8, ENUMS.BLOCK_4X4], [ENUMS.BLOCK_INVALID, ENUMS.BLOCK_INVALID]],
        [[ENUMS.BLOCK_8X4, ENUMS.BLOCK_INVALID], [ENUMS.BLOCK_4X4, ENUMS.BLOCK_INVALID]],
        [[ENUMS.BLOCK_8X8, ENUMS.BLOCK_8X4], [ENUMS.BLOCK_4X8, ENUMS.BLOCK_4X4]],
        [[ENUMS.BLOCK_8X16, ENUMS.BLOCK_8X8], [ENUMS.BLOCK_INVALID, ENUMS.BLOCK_4X8]],
        [[ENUMS.BLOCK_16X8, ENUMS.BLOCK_INVALID], [ENUMS.BLOCK_8X8, ENUMS.BLOCK_8X4]],
        [[ENUMS.BLOCK_16X16, ENUMS.BLOCK_16X8], [ENUMS.BLOCK_8X16, ENUMS.BLOCK_8X8]],
        [[ENUMS.BLOCK_16X32, ENUMS.BLOCK_16X16], [ENUMS.BLOCK_INVALID, ENUMS.BLOCK_8X16]],
        [[ENUMS.BLOCK_32X16, ENUMS.BLOCK_INVALID], [ENUMS.BLOCK_16X16, ENUMS.BLOCK_16X8]],
        [[ENUMS.BLOCK_32X32, ENUMS.BLOCK_32X16], [ENUMS.BLOCK_16X32, ENUMS.BLOCK_16X16]],
        [[ENUMS.BLOCK_32X64, ENUMS.BLOCK_32X32], [ENUMS.BLOCK_INVALID, ENUMS.BLOCK_16X32]],
        [[ENUMS.BLOCK_64X32, ENUMS.BLOCK_INVALID], [ENUMS.BLOCK_32X32, ENUMS.BLOCK_32X16]],
        [[ENUMS.BLOCK_64X64, ENUMS.BLOCK_64X32], [ENUMS.BLOCK_32X64, ENUMS.BLOCK_32X32]],
    ],

// Generates 4 bit field in which each bit set to 1 represents
// a blocksize partition  1111 means we split 64x64, 32x32, 16x16
// and 8x8.  1000 means we just split the 64x64 to 32x32
    partition_context_lookup:
            [
                {above: 15, left: 15},
                {above: 15, left: 14},
                {above: 14, left: 15},
                {above: 14, left: 14},
                {above: 14, left: 12},
                {above: 12, left: 14},
                {above: 12, left: 12},
                {above: 12, left: 8},
                {above: 8, left: 12},
                {above: 8, left: 8},
                {above: 8, left: 0},
                {above: 0, left: 8},
                {above: 0, left: 0}
            ]

});
